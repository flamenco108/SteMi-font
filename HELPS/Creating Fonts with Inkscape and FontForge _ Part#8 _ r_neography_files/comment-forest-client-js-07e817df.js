import{u as t,_ as e,s as n,n as o,e as s,c as i,k as r,dL as a,x as l,t as d,S as c,dM as p,d as h,ay as m,a7 as u,f as g,g as b,dN as f,J as v,b8 as w,b9 as y,l as k,av as S}from"./shell-6eeab4aa.js";import{e as P,n as x}from"./ref-e092bf43.js";import{o as C}from"./shreddit-comment-f7d4cfe5.js";import"./icon-admin-17275518.js";import"./icon-link-post-3cd616da.js";import"./icon-user-bb4037d6.js";import{t as $}from"./comments-7af83d42.js";import"./shreddit-spoiler-b4fa861f.js";import"./faceplate-render-5a07002f.js";import"./shreddit-comment-badges-51d2341d.js";import"./mod-notes-opener-9c4c4f42.js";import"./icon-overflow-horizontal-ea54caaf.js";import"./deleteComment-cdce5888.js";import"./requestGql-0ad47e9d.js";import"./comment-composer-host-d30bcca1.js";import"./rte-toolbar-button-emote-7a993cc5.js";import"./mention-node-738cbe19.js";import"./icon-delete-outline-625c4942.js";import"./icon-edit-outline-a68271f2.js";import"./upload-to-s3-b5278634.js";import"./faceplate-tooltip-436bdd2d.js";import"./composer-bc689e00.js";import"./faceplate-progress-28a29127.js";import"./telemetry-event-struct-d8880359.js";import"./translation-034b8d4e.js";import"./icon-admin-fill-f5609614.js";import"./icon-lock-fill-bcbbe0ac.js";import"./icon-pin-fill-6e20f64e.js";import"./mod-notes-93ce706d.js";const E=t(n);let j=class extends E{constructor(){super(...arguments),this.commentId="",this.parentCommentPermalink="",this.postPermalink="",this.isShredtopPDP=!1}static get styles(){return[i,r(".single-comment-thread-toolbar {\n  align-items: center;\n  display: flex;\n  flex-flow: row nowrap;\n  font: var(--font-title-h6);\n  justify-content: space-between;\n  padding: 0.5rem 1rem;\n}\n")]}firstUpdated(){this.updateComplete.then((()=>{const t=this.getBoundingClientRect().top;window.scrollTo({top:t-48,behavior:"auto"})}))}handleSeeFullDiscussionLink(){const t=document.querySelector("shreddit-post");t&&this.trackEvent(a(t))}render(){if(!this.commentId)return;const t="Single comment thread",e="no-underline hover:no-underline visited:no-underline "+(this.isShredtopPDP?"text-primary":"text-global-alienblue");return l`\n <div>\n <div \n class="single-comment-thread-toolbar ${this.isShredtopPDP?"text-neutral-content-weak":"text-tone-3"}" \n>\n ${this.parentCommentPermalink?l` <a href="${this.parentCommentPermalink}" class="${e}"> ${t} </a> `:l` <span>${t}</span> `}\n ${this.isShredtopPDP?l`<span class="flex-1 h-px mx-xs bg-tone-4" data-id="line"></span>`:""}\n <a \n href="${this.postPermalink}" \n class="${e}" \n @click="${this.handleSeeFullDiscussionLink}" \n>\n See full discussion\n </a>\n </div>\n </div>\n `}};e([o({type:String,attribute:"comment-id"})],j.prototype,"commentId",void 0),e([o({type:String,attribute:"parent-comment-permalink"})],j.prototype,"parentCommentPermalink",void 0),e([o({type:String,attribute:"post-permalink"})],j.prototype,"postPermalink",void 0),e([o({type:Boolean,attribute:"is-shredtop-pdp"})],j.prototype,"isShredtopPDP",void 0),j=e([s("shreddit-comments-page-tools")],j);const M=t(n);let A=class extends M{constructor(){super(...arguments),this.thingId="",this.subredditPrefixedName="",this.isTruncated=!1,this.isStaggered=!1,this.numStaggers=0,this.totalComments=0,this.isProfilePost=!1,this.isReportingEnabled=!1,this.isShredtopPDP=!1,this.permalink="",this.author="",this.isAuthorDeleted=!1,this.staggerReveals=0,this.overflowActionsMenuRef=P(),this.scrollBlocker=new c(this),this.handleCloseOverflowActionsMenu=()=>{this.overflowActionsMenuRef.value?.close(),document.documentElement.removeEventListener("click",this.handleCloseOverflowActionsMenu),this.scrollBlocker.unblockPageScrolling()}}static get styles(){return[i,r(":host {\n  display: block;\n  background-color: var(--shreddit-content-background);\n  padding-bottom: var(--spacer-xs);\n}\n.content {\n  position: relative;\n}\n.content.noOverflow {\n  overflow: hidden;\n}\n.content.truncated slot[name='truncated'] {\n  display: none;\n}\n.shadow {\n  background: linear-gradient(180deg, hsla(0, 0%, 100%, 0) 0%, var(--color-tone-7));\n  bottom: 0;\n  content: '';\n  left: 0;\n  pointer-events: none;\n  position: absolute;\n  right: 0;\n  height: 100px;\n}\n.expand-button {\n  background-color: var(--color-global-orangered);\n  border: none;\n  border-radius: 18px;\n  color: var(--color-tone-7);\n  display: block;\n  font-weight: 700;\n  height: 36px;\n  overflow: hidden;\n  padding: 0 12px;\n  text-align: center;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: calc(100% - 32px);\n  margin: 0 16px 8px;\n}\n"),r(p)]}connectedCallback(){super.connectedCallback(),this.addEventListener(C,this.handleOpenOverflowActionsMenu)}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener(C,this.handleOpenOverflowActionsMenu)}showAllComments(){this.isTruncated=!1,this.trackEvent($())}showMoreComments(){this.staggerReveals+=1,this.trackEvent($())}renderShredtopViewMoreCommentsButton(t){return h({attributes:{type:"button",className:"ml-sm xs:ml-0 font-semibold mt-md",onclick:t},appearance:"brand",shape:"pill",leadingIcon:m({size:u.Medium}),size:g.Small,children:"View more comments"})}renderTruncatedExpandButton(){return this.isShredtopPDP?this.renderShredtopViewMoreCommentsButton(this.showAllComments):l`\n <button class="expand-button" @click="${this.showAllComments}">\n \n View\n <faceplate-number number="${this.totalComments}" pretty></faceplate-number> More\n Comments\n \n </button>\n `}renderStaggeredExpandButton(){return this.staggerReveals<this.numStaggers?this.isShredtopPDP?this.renderShredtopViewMoreCommentsButton(this.showMoreComments):l`\n <button class="expand-button" @click="${this.showMoreComments}">\n View More Comments\n </button>\n `:l``}renderContent(){if(this.isStaggered){const t=[l`<slot name="staggered_1"></slot>`,l`<slot name="staggered_2"></slot>`,l`<slot name="staggered_3"></slot>`],e=this.staggerReveals>=this.numStaggers?t:t.slice(0,this.staggerReveals);return l`<div \n class="${b({content:!0,truncated:this.staggerReveals<this.numStaggers})}" \n>\n <slot></slot>\n ${e}\n </div>`}return l`\n <div \n class="${b({content:!0,truncated:this.isTruncated,noOverflow:!this.isShredtopPDP})}" \n>\n <slot></slot>\n ${this.isTruncated&&!this.isShredtopPDP?l`<div class="shadow"></div>`:l`<slot name="truncated"></slot>`}\n </div>\n `}renderExpandButton(){return this.isTruncated?this.isStaggered?this.renderStaggeredExpandButton():this.renderTruncatedExpandButton():""}render(){return l`\n ${this.renderContent()}\n <faceplate-dialog \n ${x(this.overflowActionsMenuRef)}\n class="overflow-actions-dialog" \n @click="${this.handleCloseOverflowActionsMenu}" \n>\n <faceplate-screen-reader-content id="overflow-actions-menu-label">\n Additional comment actions\n </faceplate-screen-reader-content>\n <ul class="overflow-actions-menu" aria-labelledby="overflow-actions-menu-label">\n <li>\n <a href="${this.permalink}">\n <icon-link-post aria-hidden="true" class="overflow-actions-icon"></icon-link-post>\n Share\n </a>\n </li>\n ${this.isProfilePost?"":l`\n <li>\n <a href="/${this.subredditPrefixedName}/">\n <icon-admin aria-hidden="true" class="overflow-actions-icon"></icon-admin>\n More from ${this.subredditPrefixedName}\n </a>\n </li>\n `}\n ${this.isAuthorDeleted?"":l`<li>\n <a href="/user/${this.author}/">\n <icon-user aria-hidden="true" class="overflow-actions-icon"></icon-user> ${this.author}'s profile\n </a>\n </li>`}\n ${this.isReportingEnabled?l`<li>\n <shreddit-overflow-report \n thingId="${this.thingId}" \n type="${f.COMMENT}" \n></shreddit-overflow-report>\n </li>`:""}\n <button \n class="button button-small button-plain block bg-tone-6 text-tone-3 mt-[10px] mx-auto mb-0 w-[calc(100%-20px)] max-w-full" \n>\n Close\n </button>\n </ul>\n </faceplate-dialog>\n ${this.renderExpandButton()}\n `}handleOpenOverflowActionsMenu({detail:{author:t,isAuthorDeleted:e,permalink:n,thingId:o}}){this.author=t,this.isAuthorDeleted=e,this.permalink=n,this.thingId=o,this.overflowActionsMenuRef.value?.showModal(),document.documentElement.addEventListener("click",this.handleCloseOverflowActionsMenu),this.scrollBlocker.blockPageScrolling()}};e([o({type:String})],A.prototype,"thingId",void 0),e([o({type:String,attribute:"subreddit-prefixed-name"})],A.prototype,"subredditPrefixedName",void 0),e([o({type:Boolean})],A.prototype,"isTruncated",void 0),e([o({type:Boolean})],A.prototype,"isStaggered",void 0),e([o({type:Number})],A.prototype,"numStaggers",void 0),e([o({type:Number})],A.prototype,"totalComments",void 0),e([o({type:Boolean})],A.prototype,"isProfilePost",void 0),e([o({type:Boolean,attribute:"is-reporting-enabled"})],A.prototype,"isReportingEnabled",void 0),e([o({type:Boolean,attribute:"is-shredtop-pdp"})],A.prototype,"isShredtopPDP",void 0),e([d()],A.prototype,"permalink",void 0),e([d()],A.prototype,"author",void 0),e([d()],A.prototype,"isAuthorDeleted",void 0),e([d()],A.prototype,"staggerReveals",void 0),A=e([s("shreddit-comment-tree")],A);let B=class extends n{constructor(){super(...arguments),this.target="",this.path="",this.partial=null,this.handleSortEvent=async t=>{const e=t.detail.selected;this.updateLocation({sort:e});const n=new URL(`${location.origin}${this.path}`);n.searchParams.set("sort",e.toLowerCase()),n.searchParams.set("inline-refresh","true");const o=n.toString().substring(location.origin.length),s=document.createElement("faceplate-partial");s.setAttribute("loading",v.Programmatic),s.setAttribute("src",o),s.setAttribute("class","block min-h-screen xs:min-h-[20rem]");const i=document.createElement("shreddit-loading");s.appendChild(i);const r=this.partial??document.getElementById(this.target),a=`${r.getBoundingClientRect().height}px`;s.style.minHeight=a,r.insertAdjacentElement("beforebegin",s),r.remove(),this.partial=s;try{const t=new Promise(((t,e)=>{const n=t=>{this.partial!==s&&(t.stopImmediatePropagation(),t.stopPropagation()),e()};s.addEventListener("faceplate-error",n,{once:!0}),s.addEventListener("faceplate-alert",n,{once:!0})}));await Promise.race([t,s.load()]),this.partial=null;document.getElementById(this.target).style.minHeight=a,w(this,{message:"The comments are sorted successfully",options:{priority:y.assertive}})}catch{if(this.partial!==s)return;this.dispatchEvent(k("faceplate-alert",{level:S.error,message:"Failed to load the comments."}))}}}updateLocation({sort:t}){const e=new URL(location.href);e.searchParams.set("sort",t.toLowerCase()),history.replaceState({},"",e.toString())}connectedCallback(){super.connectedCallback(),this.querySelector("shreddit-sort-dropdown")?.addEventListener("comment-sort",this.handleSortEvent)}disconnectedCallback(){super.disconnectedCallback(),this.querySelector("shreddit-sort-dropdown")?.removeEventListener("comment-sort",this.handleSortEvent)}render(){return l`<slot></slot>`}};e([o({type:String})],B.prototype,"target",void 0),e([o({type:String})],B.prototype,"path",void 0),B=e([s("shreddit-comments-sort-dropdown")],B);
//# sourceMappingURL=comment-forest-client-js-07e817df.js.map
